<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.NinjectExtension</name>
    </assembly>
    <members>
        <member name="T:Prism.NinjectExtension.NinjectServiceLocatorAdapter">
            <summary>
            The Service Locator Adapter for Ninject.
            </summary>
        </member>
        <member name="M:Prism.NinjectExtension.NinjectServiceLocatorAdapter.#ctor(Ninject.IKernel)">
            <summary>
            The default constructor that takes in a Ninject Kernel to be use for resolution of service types 
            </summary>
            <param name="kernel">the Ninject Kernel that is been adapter</param>
        </member>
        <member name="T:Prism.NinjectExtension.NinjectBootstrapper">
            <summary>
            The bootstrapper - Sets up all required service for Prism and create the Ninject Kernel for use in the application  
            </summary>
        </member>
        <member name="M:Prism.NinjectExtension.NinjectBootstrapper.Run(System.Boolean)">
            <summary>
            Run the bootstrapper process.
            </summary>
            <param name="runWithDefaultConfiguration">If <see langword="true"/>, registers default Composite Application Library services in the container. This is the default behavior.</param>
        </member>
        <member name="M:Prism.NinjectExtension.NinjectBootstrapper.ConfigureServiceLocator">
            <summary>
            Configures the LocatorProvider for the <see cref="T:Microsoft.Practices.ServiceLocation.ServiceLocator"/>.
            </summary>
        </member>
        <member name="M:Prism.NinjectExtension.NinjectBootstrapper.RegisterFrameworkExceptionTypes">
            <summary>
            Registers in the <see cref="T:Ninject.IKernel"/> the <see cref="T:System.Type"/> of the Exceptions
            that are not considered root exceptions by the <see cref="T:Microsoft.Practices.Prism.ExceptionExtensions"/>.
            </summary>
        </member>
        <member name="M:Prism.NinjectExtension.NinjectBootstrapper.ConfigureContainer">
            <summary>
            Configures the <see cref="T:Ninject.IKernel"/>. May be overwritten in a derived class to add specific
            type mappings required by the application.
            </summary>
        </member>
        <member name="M:Prism.NinjectExtension.NinjectBootstrapper.InitializeModules">
            <summary>
            Initializes the modules. May be overwritten in a derived class to use a custom Modules catalogue
            </summary>
        </member>
        <member name="M:Prism.NinjectExtension.NinjectBootstrapper.CreateKernel">
            <summary>
            Creates the <see cref="T:Ninject.IKernel"/> that will be used as the default container.
            </summary>
            <returns>A new instance of <see cref="T:Ninject.IKernel"/>.</returns>
        </member>
        <member name="P:Prism.NinjectExtension.NinjectBootstrapper.Kernel">
            <summary>
            Gets the default <see cref="T:Ninject.IKernel"/> for the application.
            </summary>
            <value>The default <see cref="T:Ninject.IKernel"/> instance.</value>
        </member>
        <member name="T:Prism.NinjectExtension.KernelExtensions">
            <summary>
            Extensions for the Ninject Kernel to provide similar methods as the IUnityContainer to help in 
            the transition to this Ninject Extension.  
            </summary>
        </member>
        <member name="M:Prism.NinjectExtension.KernelExtensions.IsRegistered``1(Ninject.IKernel)">
            <summary>
            Basic method to find out if the service, <typeparamref name="TServiceType"/>, has been registered with the <param name="kernel"/> 
            </summary>
            <typeparam name="TServiceType"> the service to check for</typeparam>
            <param name="kernel"> the Ninject Kernel to check in</param>
            <returns> </returns>
        </member>
        <member name="M:Prism.NinjectExtension.KernelExtensions.IsRegistered(Ninject.IKernel,System.Type)">
            <summary>
            Basic method to find out if the service, <paramref name="serviceType"/>, has been registered with the <param name="kernel"/>  
            </summary>
            <param name="kernel"></param>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.NinjectExtension.KernelExtensions.RegisterTypeIfMissing``2(Ninject.IKernel,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TFromType"></typeparam>
            <typeparam name="TToType"></typeparam>
            <param name="kernel"></param>
            <param name="registerAsSingleton"></param>
        </member>
        <member name="M:Prism.NinjectExtension.KernelExtensions.RegisterTypeIfMissing(Ninject.IKernel,System.Type,System.Type,System.Boolean)">
            <summary>
            
            </summary>
            <param name="kernel"></param>
            <param name="fromType"></param>
            <param name="toType"></param>
            <param name="registerAsSingleton"></param>
        </member>
        <member name="M:Prism.NinjectExtension.KernelExtensions.Resolve``1(Ninject.IKernel,System.String,Ninject.Parameters.IParameter[])">
            <summary>
            Resolve an instance of the requested type with the given name from the kernel.
            </summary>
            <typeparam name="T"><see cref="T:System.Type"/> of object to get from the container.</typeparam>
            <param name="kernel">kernel to resolve from.</param>
            <param name="name">Name of the object to retrieve.</param>
            <param name="overrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Prism.NinjectExtension.KernelExtensions.Resolve(Ninject.IKernel,System.Type,System.String,Ninject.Parameters.IParameter[])">
            <summary>
            Resolve an instance of the default requested type from the kernel.
            </summary>
            <param name="kernel">kernel to resolve from.</param>
            <param name="t"><see cref="T:System.Type"/> of object to get from the kernel.</param>
            <param name="name">Name of the object to retrieve.</param>
            <param name="overrides">Any overrides for the resolve call.</param>
            <returns>The retrieved object.</returns>
        </member>
        <member name="M:Prism.NinjectExtension.KernelExtensions.ResolveAll``1(Ninject.IKernel,Ninject.Parameters.IParameter[])">
            <summary>
            Return instances of all registered types requested.
            </summary>
            <remarks>
            <para>
            This method is useful if you've registered multiple types with the same
            <see cref="T:System.Type"/> but different names.
            </para>
            <para>
            Be aware that this method does NOT return an instance for the default (unnamed) registration.
            </para>
            </remarks>
            <typeparam name="T">The type requested.</typeparam>
            <param name="container">Container to resolve from.</param>
            <param name="resolverOverrides">Any overrides for the resolve calls.</param>
            <returns>Set of objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Prism.NinjectExtension.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.BootstrapperSequenceCompleted">
            <summary>
              Looks up a localized string similar to Bootstrapper sequence completed..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.ConfiguringDefaultRegionBehaviors">
            <summary>
              Looks up a localized string similar to Configuring default region behaviors..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.ConfiguringKernel">
            <summary>
              Looks up a localized string similar to Configuring the Ninject kernel..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.ConfiguringModuleCatalog">
            <summary>
              Looks up a localized string similar to Configuring module catalog..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.ConfiguringRegionAdapters">
            <summary>
              Looks up a localized string similar to Configuring region adapters..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.ConfiguringServiceLocatorSingleton">
            <summary>
              Looks up a localized string similar to Configuring ServiceLocator singleton..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.CreatingKernel">
            <summary>
              Looks up a localized string similar to Creating Ninject kernel..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.CreatingModuleCatalog">
            <summary>
              Looks up a localized string similar to Creating module catalog..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.CreatingShell">
            <summary>
              Looks up a localized string similar to Creating the shell..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.InitializingModules">
            <summary>
              Looks up a localized string similar to Initializing modules..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.InitializingShell">
            <summary>
              Looks up a localized string similar to Initializing the shell..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.LoggerCreatedSuccessfully">
            <summary>
              Looks up a localized string similar to Logger was created successfully..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.NotOverwrittenGetModuleEnumeratorException">
            <summary>
              Looks up a localized string similar to The method &apos;GetModuleEnumerator&apos; of the bootstrapper must be overwritten in order to use the default module initialization logic..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.NullKernelException">
            <summary>
              Looks up a localized string similar to The IKernel is required and cannot be null..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.NullLoggerFacadeException">
            <summary>
              Looks up a localized string similar to The ILoggerFacade is required and cannot be null..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.NullModuleCatalogException">
            <summary>
              Looks up a localized string similar to The IModuleCatalog is required and cannot be null in order to initialize the modules..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.RegisteringFrameworkExceptionTypes">
            <summary>
              Looks up a localized string similar to Registering Framework Exception Types..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.SettingTheRegionManager">
            <summary>
              Looks up a localized string similar to Setting the RegionManager..
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.TypeMappingAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; was already registered by the application. Skipping....
            </summary>
        </member>
        <member name="P:Prism.NinjectExtension.Properties.Resources.UpdatingRegions">
            <summary>
              Looks up a localized string similar to Updating Regions..
            </summary>
        </member>
    </members>
</doc>
